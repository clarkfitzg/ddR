% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sparklite.R
\name{update_closure}
\alias{update_closure}
\title{Create or update a function closure with new values}
\usage{
update_closure(fun, varlist, envir = .GlobalEnv)
}
\arguments{
\item{fun}{function with old or no environment}

\item{varlist}{character vector of names of objects to export.}

\item{envir}{environment from which to export variables}
}
\value{
function with updated environment
}
\description{
Adds data to a function so that it can be serialized and run on a remote
cluster, avoiding errors of type \code{Object not found}.
}
\details{
The updating behavior means that if \code{fun} already has an
environment containing \code{a = 10} then running \code{a <- 20;
updateClosure(fun, "a")} will return a function where \code{a = 20}.

This function is modeled after \code{\link[parallel]{clusterExport}}.
}
\examples{
# To apply f you'll need to also get it's dependencies
f <- makeClosure(f, c("a", "helperfunc"))
clusterApply(sc, 1:10, f)
}
\seealso{
\code{\link[parallel]{clusterExport}}
}

